@page "/GpUploadInput/{UserId}"
@using AdvancedAnalysisDesign.Models
@using AdvancedAnalysisDesign.Models.Database
@using AdvancedAnalysisDesign.Models.DataTransferObjects
@using AdvancedAnalysisDesign.Models.ViewModels
@using AdvancedAnalysisDesign.Services
@using Flurl.Util
@using Microsoft.EntityFrameworkCore

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject PatientService PatientService
@inject BloodworkService BloodworkService
@inject AADContext Context

@if (isLoaded)
{
  <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudText>@userDetail.FirstName @userDetail.LastName</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudExpansionPanels MultiExpansion="true">
                @foreach (var patientMedication in patientMedications)
                {
                    <MudExpansionPanel Text="@patientMedication.Medication.MedicationName">
                        <MudTable Items="@patientMedication.PatientBloodworks" Context="Bloodwork" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                            <HeaderContent>
                                <MudTh>Id</MudTh>
                                <MudTh>Bloodwork Test</MudTh>
                            </HeaderContent>
                            @* <RowTemplate> *@
                            @*     <MudTd DataLabel="Id">@Bloodwork.Id</MudTd> *@
                            @*     <MudTd DataLabel="Bloodwork Test">@Bloodwork.BloodworkTest.TestName</MudTd> *@
                            @*     <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => Bloodwork.ShowDetails = !patientMedication.ShowDetails)">@((patientMedication.ShowDetails)? "Hide" : "Show") Test Results</MudButton></MudTd> *@
                            @* </RowTemplate> *@
                            @* <ChildRowContent> *@
                            @*     @if (Bloodwork.ShowDetails) *@
                            @*     { *@
                            @*         <MudTr> *@
                            @*             <td colspan="4"> *@
                            @*                 <MudCard Elevation="0"> *@
                            @*                     <MudCardHeader> *@
                            @*                         <CardHeaderContent> *@
                            @*                             <MudText Typo="Typo.body1">Test Results for <strong>@Medication.BloodworkTest.TestName</strong></MudText> *@
                            @*                         </CardHeaderContent> *@
                            @*                     </MudCardHeader> *@
                            @*                     <MudCardContent Class="pa-0"> *@
                            @*                         <MudTable Items="@Medication.PatientBloodworkTests" Context="AddressContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0"> *@
                            @*                             <HeaderContent> *@
                            @*                                 <MudTh>Date Of Result</MudTh> *@
                            @*                                 <MudTh>Test Result</MudTh> *@
                            @*                             </HeaderContent> *@
                            @*                             <RowTemplate> *@
                            @*                                 <MudTd DataLabel="Date Of Upload">@AddressContext.DateOfUpload</MudTd> *@
                            @*                                 <MudTd DataLabel="Result">@AddressContext.Result</MudTd> *@
                            @*                             </RowTemplate> *@
                            @*                         </MudTable> *@
                            @*                     </MudCardContent> *@
                            @*                 </MudCard> *@
                            @*             </td> *@
                            @*         </MudTr> *@
                            @*     } *@
                            @* </ChildRowContent> *@
                        </MudTable>
                        <MudDivider/>
                        <MudGrid Style="flex-direction: row; align-items:center" Justify="Justify.Center" Class="py-2">
                            <MudItem xs="4">
                                <MudAutocomplete MaxItems="@null" T="string" Label="Bloodwork Test" @bind-Value="@patientMedication.BloodworkTest" SearchFunc="@Search" Variant="Variant.Outlined"/>
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField @bind-Value="@patientMedication.ResultInput" Label="Result" Variant="Variant.Outlined"></MudTextField>
                            </MudItem>
                            @* <MudItem xs="2"> *@
                            @*     <MudDatePicker Label="Date of Test" @bind-Date="date" />
                            @* </MudItem> *@
                            <MudItem xs="4">
                                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.SaveAlt" IconColor="Color.Primary" Size="Size.Medium" OnClick="async () => await InputTestResults(patientMedication)">Add Test Results</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudExpansionPanel>
                }
                </MudExpansionPanels>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
}
else
{
    <LoadingScreen></LoadingScreen>
}

@code {
    [Parameter]
    public string UserId { get; set; }
    UserDetail userDetail = new();
    bool isLoaded;
    //DateTime date;

    List<PatientMedicationView> patientMedications = new();
    string[] bloodWorkTests = {};
    List<PatientBloodworkTestView> patientBloodworkTests = new();

    private async Task<IEnumerable<string>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return bloodWorkTests;
        return bloodWorkTests.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task InputTestResults(PatientMedicationView medicationView)
    {
        if (!string.IsNullOrEmpty(medicationView.BloodworkTest) && !string.IsNullOrEmpty(medicationView.ResultInput))
        {
            isLoaded = false;
            await BloodworkService.AddPatientBloodwork(medicationView);
            await LoadPatientData();
            isLoaded = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole("GP") || user.IsInRole("Admin"))
        {
            await LoadPatientData();
            bloodWorkTests = (await BloodworkService.GetAllBloodworkTests()).Select(x => x.TestName).ToArray();
        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }
        isLoaded = true;
    }
    
    private async Task LoadPatientData()
    {
        isLoaded = false;
        // userDetail = await Context.UserDetails.SingleOrDefaultAsync(x => x.);
        // patientMedications = await BloodworkService.ConvertPatientMedicationsToViewModel(patient.Medications);
        isLoaded = true;
    }
}