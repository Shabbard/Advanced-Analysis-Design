@page "/Register"
@layout EmptyLayout
@using AdvancedAnalysisDesign.Models
@using AdvancedAnalysisDesign.Enums
@using AdvancedAnalysisDesign.Models.Payloads
@using InputType = MudBlazor.InputType
@using AdvancedAnalysisDesign.Services

@inject UserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<InputFile id="fileInput" OnChange="UploadFiles" hidden multiple accept=".jpg, .jpeg, .png, .gif" />
<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
        <MudGrid Justify="Justify.Center" Class="mt-16">
            <MudItem>
                <EditForm Model="@registrationPayload" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <MudCard Elevation="5" Class="RegistrationCard">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Align="Align.Center" Typo="Typo.h3">Registration</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid Justify="Justify.Center" Spacing="2">
                                <MudItem xs="6">
                                    <MudTextField Label="First name" @bind-Value="registrationPayload.FirstName" For="@(() => registrationPayload.FirstName)" Required="true" />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Surname" @bind-Value="registrationPayload.LastName" For="@(() => registrationPayload.LastName)" Required="true" />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Email" @bind-Value="registrationPayload.EmailAddress" For="@(() => registrationPayload.EmailAddress)" Required="true" />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Phone Number" @bind-Value="registrationPayload.PhoneNumber" For="@(() => registrationPayload.PhoneNumber)" Required="true" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudDatePicker Label="Date of Birth" InputIcon="null" @bind-Date="@registrationPayload.DateOfBirth" />
                                </MudItem>

                                <MudItem xs="12">
                                    <MudSelect Label="Gender" Dense="true" OffsetY="true" @bind-Value="registrationPayload.Gender" Placeholder="Select culture">
                                        <MudSelectItem T="Gender" Value="@(Gender.Male)">Male</MudSelectItem>
                                        <MudSelectItem T="Gender" Value="@(Gender.Female)">Female</MudSelectItem>
                                        <MudSelectItem T="Gender" Value="@(Gender.Other)">Other</MudSelectItem>
                                    </MudSelect>
                                </MudItem>

                                <MudItem xs="6">
                                    <MudTextField Label="Password" @bind-Value="registrationPayload.Password" For="@(() => registrationPayload.Password)" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Password" HelperText="Repeat the password" @bind-Value="registrationPayload.PasswordComparison" For="@(() => registrationPayload.PasswordComparison)" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" Required="true" />
                                </MudItem>
                            </MudGrid>

                            <MudGrid Spacing="1">
                                <MudItem xs="12">
                                    <MudTextField Label="NHS Number" @bind-Value="registrationPayload.NhsNumber" For="@(() => registrationPayload.NhsNumber)" />
                                </MudItem>
                                <MudItem xs="5">
                                    <MudText Style="margin-top: 1rem" Typo="Typo.body1">Upload Image Verification.</MudText>
                                </MudItem>
                                <MudItem xs="1">
                                    <MudIconButton OnClick="TogglePopOverVisibility" Icon="@Icons.Material.Filled.Info"></MudIconButton>
                                    <MudPopover Open="@isPopOverVisible" Style="width:250px; position:relative;" Class="px-4 pt-4">

                                        <MudText>Please upload two images: 1) A photo ID, Passport or Driving license. 2) A picture of your face.</MudText>
                                        <MudButton OnClick="TogglePopOverVisibility" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>

                                    </MudPopover>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudIconButton HtmlTag="label" Icon="@Icons.Material.Filled.AddAPhoto" for="fileInput"></MudIconButton>
                                </MudItem>
                                @if (files != null)
                                {
                                    <MudItem xs="12">
                                        <MudGrid Justify="Justify.SpaceEvenly" Style="flex-direction:row; align-items:center">
                                            @foreach (var file in files)
                                            {

                                                <MudItem xs="1">
                                                    <MudIcon Icon="@Icons.Filled.AttachFile" />
                                                </MudItem>
                                                <MudItem xs="3">
                                                    <MudText Typo="Typo.body1">@file.Name</MudText>
                                                    <code>@file.Size Bytes</code>
                                                </MudItem>
                                                <MudItem xs="8">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@(() => RemoveImage(@file))"></MudIconButton>

                                                </MudItem>
                                            }
                                        </MudGrid>
                                    </MudItem>
                                }
                            </MudGrid>

                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Style="min-width:100%">Register</MudButton>
                        </MudCardActions>
                        <MudGrid Justify="Justify.Center" Class="mt-1 pb-2">
                            <MudLink Href="/Login" Typo="Typo.body2">Back to Login</MudLink> @*Link to Login page*@
                        </MudGrid>

                    </MudCard>
                </EditForm>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudMainContent>

@code{
    RegistrationPayload registrationPayload = new();
    IList<IBrowserFile> files = new List<IBrowserFile>();
    bool isPopOverVisible;
    bool isPasswordVisible;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
        PasswordInputIcon = PasswordInputIcon == Icons.Material.Filled.VisibilityOff ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        PasswordInput = PasswordInput == InputType.Password ? InputType.Text : InputType.Password;
    }

    public void TogglePopOverVisibility()
    {
        isPopOverVisible = !isPopOverVisible;
    }

    private async void OnValidSubmit(EditContext context)
    {
        StateHasChanged();
        try
        {
            registrationPayload.VerificationImages = files;
            await UserService.RegisterPatient(registrationPayload);
            Snackbar.Add("Registration successful!", Severity.Success, config => { config.ShowCloseIcon = false; });
            NavManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }

    private void UploadFiles(InputFileChangeEventArgs e)
    {
        int maxFiles = 2;
        foreach (var file in e.GetMultipleFiles(maxFiles))
        {
            if(files.Count < maxFiles)
            {
                files.Add(file);
            }
            else
            {
                Snackbar.Add("You are only allowed to upload two images.", Severity.Warning, config => { config.ShowCloseIcon = false; });
            }

        }
    }

    private void RemoveImage(IBrowserFile file)
    {
        files.Remove(file);
    }
}