@page "/Login"
@layout EmptyLayout
@using AdvancedAnalysisDesign.Models.Database
@using AdvancedAnalysisDesign.Services
@using InputType = MudBlazor.InputType

@inject UserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

@if (isLoading)
{
    <LoadingScreen></LoadingScreen>
}
else
{
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
            <MudGrid Justify="Justify.Center" Class="mt-16">
                <MudItem xs="12">
                    <EditForm Model="@model">
                        <DataAnnotationsValidator />
                        <MudCard Elevation="5" Class="LoginCard">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Align="Align.Center" Typo="Typo.h3">Login</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudTextField Label="Email" @bind-Value="model.Email" For="@(() => model.Email)" />
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudTextField Label="Password" @bind-Value="password" For="@(() => password)" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            <MudCardActions>
                                <MudGrid Justify="Justify.Center" Class="pb-2">
                                    <MudItem xs="12">
                                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="demo-form-button" Style="min-width:100%" OnClick="@LoginRequest">Login</MudButton> @**@
                                    </MudItem>
                                    <MudGrid Style="flex-direction: column; align-items: center; justify-content: center">
                                        <MudItem xs="12">
                                            <MudLink Href="/ForgotPassword" Typo="Typo.body2">Forgot Password?</MudLink> @*Link to forgot password page*@
                                        </MudItem>
                                        <MudItem Class="mt-n5" xs="12">
                                            <MudLink Href="/Register" Typo="Typo.body2">Dont have an account? Register Here</MudLink> @*Link to register page*@
                                        </MudItem>
                                    </MudGrid>
                                </MudGrid>
                            </MudCardActions>
                        </MudCard>
                    </EditForm>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudMainContent>
}

@code{
    User model = new User();
    string password;
    bool isLoading;

    public async void LoginRequest()
    {
        isLoading = true;
        try
        {
            await UserService.Login(model.Email, password);
            isLoading = false;
            StateHasChanged();
        }
        catch (Exception e)
        {
            isLoading = false;
            Snackbar.Add(e.Message, Severity.Error);
            StateHasChanged();
        }
    }

    //Allows the user to toggle password visibility on & off using the show password icon

    bool isPasswordVisible;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
        PasswordInputIcon = PasswordInputIcon == Icons.Material.Filled.VisibilityOff ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        PasswordInput = PasswordInput == InputType.Password ? InputType.Text : InputType.Password;
    }
}