@page "/GpUploadInput/{PatientId:int}"
@using AdvancedAnalysisDesign.Models
@using AdvancedAnalysisDesign.Models.Database
@using AdvancedAnalysisDesign.Services

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject BloodworkService BloodworkService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">

                <MudText>Input Patient Test Results</MudText>

                <MudGrid Style="flex-direction: row; align-items:center" Justify="Justify.Center" Class="py-2">

                    <MudItem xs="4">
                        <MudAutocomplete MaxItems="@null" T="string" Label="Bloodwork Test" @Value="@bloodworkTest" ValueChanged="@SelectBloodworkTest" SearchFunc="@Search" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="4">
                        <MudTextField @bind-Value="resultInput" Label="Result" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>

                    <MudItem xs="2">
                        @* <MudDatePicker Label="Date of Test" @bind-Date="date" /> *@
                    </MudItem>

                    <MudItem xs="2">
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.SaveAlt" IconColor="Color.Primary" Size="Size.Large" OnClick="@InputTestResults">Add Test Results</MudButton>
                    </MudItem>

                </MudGrid>
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Class="pa-4">

                <MudTable Items="patientBloodworkTests" Breakpoint="Breakpoint.Sm" FixedHeader="true" Height="600px">
                    <HeaderContent>
                        <MudTh>Bloodwork Test</MudTh>
                        <MudTh>Result</MudTh>
                        <MudTh>Date of Upload</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="Test">
                        @* <MudTd DataLabel="Bloodwork Test">@Test.TestType</MudTd> *@
                        <MudTd DataLabel="Result">@Test.Result</MudTd>
                        <MudTd DataLabel="Date of Upload">@Test.Result</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>

    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public int PatientId { get; set; }
    string bloodworkTest;
    string resultInput;
    //DateTime date;

    List<PatientBloodworkTest> patientBloodworkTests = new();
    string[] bloodWorkTests;

    private async Task<IEnumerable<string>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return bloodWorkTests;
        return bloodWorkTests.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task InputTestResults()
    {
        if (!string.IsNullOrEmpty(bloodworkTest) && !string.IsNullOrEmpty(resultInput))
        {
            patientBloodworkTests.Add(new PatientBloodworkTest
            {
                // TestType = bloodworkTest,
                Result = resultInput
            });

            bloodworkTest = "";
            resultInput = "";
        }
    }

    private async Task SelectBloodworkTest(string value)
    {
        await BloodworkService.FetchPatientBloodwork(PatientId, value);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole("GP") || user.IsInRole("Admin"))
        {
            bloodWorkTests = (await BloodworkService.GetAllBloodworkTests()).Select(x => x.TestName).ToArray();
        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }
    }
}