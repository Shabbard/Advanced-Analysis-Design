@page "/settings"
@using InputType = MudBlazor.InputType
@using AdvancedAnalysisDesign.Services
@using Blazored.LocalStorage
@using AdvancedAnalysisDesign.Models.Payloads
@using AdvancedAnalysisDesign.Models.Database
@using Microsoft.AspNetCore.Identity
@using AdvancedAnalysisDesign.Dialogs
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject UserService UserService
@inject ISnackbar Snackbar
@inject UserManager<User> UserManager
@inject IDialogService Dialog

<AuthorizeView>
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudGrid Spacing="1">
            <MudItem xs="12">
                <MudCard>
                    <MudCardContent>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Account Settings</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudExpansionPanels MultiExpansion="true">
                            <MudExpansionPanel Text="Password Reset">
                                <EditForm Model="@passwordResetModel" OnValidSubmit="UpdatePassword" Context="anotherName">
                                    <DataAnnotationsValidator />
                                    <MudGrid Spacing="1"> 
                                        <MudItem xs="12">
                                            <MudTextField Label="Current password" @bind-Value="passwordResetModel.CurrentPassword" For="@(() => passwordResetModel.CurrentPassword)" />
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudTextField Label="New password" HelperText="Password must have at least one uppercase letter, digit and alphanumeric character" Class="mt-3" @bind-Value="passwordResetModel.NewPassword" For="@(() => passwordResetModel.NewPassword)" InputType="PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility"/>                                   
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudTextField Label="Confim new password" HelperText="Repeat the password" Class="mt-3" @bind-Value="passwordResetModel.ConfirmNewPassword" For="@(() => passwordResetModel.ConfirmNewPassword)" InputType="PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility"/>                                   
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Update Password</MudButton>                               
                                        </MudItem>
                                    </MudGrid>
                                </EditForm>
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="Phone Number">
                                <MudGrid Spacing="1">
                                    <MudItem xs="12">
                                        <MudTextField Label="Phone number" Class="mt-3" @bind-Value="updatedPhoneNumber"/>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudButton ButtonType="ButtonType.Button" OnClick="UpdatePhoneNumber" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="Email Address">
                                <MudGrid Spacing="1">
                                    <MudItem xs="12">
                                        <MudTextField ReadOnly="true" Label="Email address" Class="mt-3" @bind-Value="currentEmailAddress"/>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudTextField Label="New email address" Class="mt-3" @bind-Value="updatedEmailAddress"/>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudButton ButtonType="ButtonType.Button" OnClick="UpdateEmailAddress" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudExpansionPanel>
                             <MudExpansionPanel Text="Personal Data">
                                <MudGrid Spacing="1">
                                    <MudItem xs="12">
                                        <MudButton ButtonType="ButtonType.Button" OnClick="() => UserService.DownloadPersonalDataAsync()" Variant="Variant.Filled" Color="Color.Primary">Download Personal Data</MudButton>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudButton ButtonType="ButtonType.Button" OnClick="() => { Dialog.Show<ConfirmUserDeleteDialog>(); }" Variant="Variant.Filled" Color="Color.Primary">Delete Personal Data</MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                <MudCard>
                    <MudCardContent>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">System Settings</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudExpansionPanels MultiExpansion="true">
                            <MudExpansionPanel Text="Dark Mode">
                                <MudToggleIconButton Toggled="@darkModeEnabled" ToggledChanged="() => ToggleDarkMode()"
                                                     Icon="@Icons.Material.Filled.BrightnessHigh"
                                                     ToggledIcon="@Icons.Material.Filled.Bedtime"/>
                                <span>Toggle Dark Mode</span>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudContainer>
</AuthorizeView>

@code {
    bool darkModeEnabled;
    UpdatePasswordPayload passwordResetModel = new();
    string updatedPhoneNumber;
    string updatedEmailAddress;
    string currentEmailAddress;
    bool isPasswordVisible;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authStateUser = authState.User;

        if (authStateUser.Identity.IsAuthenticated)
        {
            var user = await UserService.GetCurrentUserAsync();
            updatedPhoneNumber = await UserManager.GetPhoneNumberAsync(user);
            currentEmailAddress = await UserManager.GetEmailAsync(user);
        }
        else
        {
            NavManager.NavigateTo("/", true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        darkModeEnabled = await LocalStorage.GetItemAsync<bool>("DarkModeEnabled");
    }

    private async Task ToggleDarkMode()
    {
        if (darkModeEnabled)
        {
            await LocalStorage.SetItemAsync("DarkModeEnabled", "false");
        }
        else
        {
            await LocalStorage.SetItemAsync("DarkModeEnabled", "true");
        }
        StateHasChanged();
    }
    
    void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
        PasswordInputIcon = PasswordInputIcon == Icons.Material.Filled.VisibilityOff ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        PasswordInput = PasswordInput == InputType.Password ? InputType.Text : InputType.Password;
    }

    private async Task UpdatePassword()
    {
        try
        {
            await UserService.UpdatePasswordAsync(passwordResetModel);
            Snackbar.Add("Password update successful!", Severity.Success, config => { config.ShowCloseIcon = false; });
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }
    
    private async Task UpdatePhoneNumber()
    {
        try
        {
            await UserService.UpdatePhoneNumberAsync(updatedPhoneNumber);
            Snackbar.Add("Phone number update successful!", Severity.Success, config => { config.ShowCloseIcon = false; });
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }
    
    private async Task UpdateEmailAddress()
    {
        try
        {
            await UserService.UpdateEmailAddressAsync(updatedEmailAddress);
            Snackbar.Add("Confirmation email sent to your current email address.", Severity.Success, config => { config.ShowCloseIcon = false; });
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }
}