@page "/PrescriptionPreparation"
@using AdvancedAnalysisDesign.Services
@using AdvancedAnalysisDesign.Enums
@using AdvancedAnalysisDesign.Models.Database
@using AdvancedAnalysisDesign.Models.ViewModels
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject PatientService PatientService
@inject NonPatientService NonPatientService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-8">

    <MudGrid Justify="Justify.Center">

        <MudItem xs="12">

            <MudText Typo="Typo.h4">
                Prescription Preparation
            </MudText>

        </MudItem>

        <MudItem xs="12">
            <MudDivider />
        </MudItem>

        <MudItem xs="12">

            <MudTable Items="@PharmacyView" Hover="true" Breakpoint="Breakpoint.Sm">

                <HeaderContent>

                    <MudTh>First Name</MudTh>
                    <MudTh>Last Name</MudTh>
                    <MudTh>DOB</MudTh>
                    <MudTh>Prescriptions</MudTh>

                </HeaderContent>

                <RowTemplate>

                    <MudTd DataLabel="First Name">@context.UserDetail.FirstName</MudTd>
                    <MudTd DataLabel="Second Name">@context.UserDetail.LastName</MudTd>
                    <MudTd DataLabel="DOB">@context.UserDetail.DateOfBirth.ToString("d")</MudTd>
                    <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowPrescriptions(context.Id))">@((context.ShowDetails == true)? "Hide" : "Show") Prescription</MudButton></MudTd>

                </RowTemplate>

                <ChildRowContent>
                    @if (context.ShowDetails)
                    {
                        <MudTr>
                            <td colspan="4">
                                <MudCard Elevation="0">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.body1"><strong> Prescription Details </strong></MudText>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent Class="pa-0">
                                        <MudTable Items="@context.PatientMedication" Context="PatientMeds" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                            <HeaderContent>
                                                <MudTh>Medication</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Medication">@PatientMeds.Medication.MedicationName</MudTd>
                                                <MudTd><MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Success" OnClick="@(() => PrescriptionPrepared(@PatientMeds.Pickup))"> Prepared</MudButton></MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </MudCardContent>
                                </MudCard>
                            </td>
                        </MudTr>
                     }
                </ChildRowContent>
            </MudTable>
        </MudItem>
    </MudGrid>

</MudContainer>

@code {

    List<Patient> patientWithPickups = new();
    List<PharmacyViewModel> PharmacyView = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole(Role.Admin.ToString()))
        {
            patientWithPickups = await PatientService.FetchAllPatientsWithPickups();
            PharmacyView = await PatientService.ConvertPharmacyView(patientWithPickups);
        }
        else if (user.IsInRole(Role.Pharmacist.ToString()))
        {
            var currentMedicalSite = await NonPatientService.GetMedicalInstitutionForUser();
            patientWithPickups = await PatientService.GetAllMedicationsforInstitution(currentMedicalSite);

            patientWithPickups = patientWithPickups.Where(x => x.Medications.Any(x => !x.Pickup.IsPrepared)).ToList();

            PharmacyView = await PatientService.ConvertPharmacyView(patientWithPickups);
        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }
    }

    public async Task PrescriptionPrepared(Pickup PickUpID)
    {
        await PatientService.PrescriptionPrepared(PickUpID);

        Snackbar.Add("Prescription has been prepared", Severity.Success);

        StateHasChanged();
    }

    private async Task ShowPrescriptions(int ID)
    {
        PharmacyViewModel patient = PharmacyView.First(x => x.Id == ID);

        patient.ShowDetails = !patient.ShowDetails;
    }

}