@page "/PharmacistDashboard"

@using AdvancedAnalysisDesign.Services
@using AdvancedAnalysisDesign.Models.Database
@using AdvancedAnalysisDesign.Models.Payloads
@using AdvancedAnalysisDesign.Enums
@using Syncfusion.Blazor.Schedule
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject PatientService PatientService

@if (isLoading)
{
    <LoadingScreen></LoadingScreen>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">

        <MudGrid Style="flex-direction:column">

            <MudGrid Style="flex-direction:row" Justify="Justify.SpaceAround" Class="pb-10">
                <MudItem xs="6">
                    <MudText Typo="Typo.h4" Class="pl-10">Daily Tasks</MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudText Align="Align.Right" Class="pr-10" Typo="Typo.h4">Lloyds Pharmacy - Woodbourne Road</MudText>
                </MudItem>
            </MudGrid>

            <MudGrid Style="flex-direction:row" Justify="Justify.SpaceEvenly">
                <MudItem xs="4">
                    <MudPaper Elevation="4">
                        <MudText Class="pb-7 pt-5" Align="Align.Center" Typo="Typo.h5">Prescriptions Due</MudText>
                        <MudText Class="pb-7 pt-5" Align="Align.Center" Typo="Typo.h2" Color="Color.Primary">@prescriptionsDue</MudText>
                        <MudGrid Justify="Justify.FlexEnd" Class="pr-1">
                            <MudItem>
                                <MudButton OnClick="@(() =>  NavigationManager.NavigateTo("/PrescriptionList", true))" Variant="Variant.Text" EndIcon="@Icons.Material.Outlined.KeyboardArrowRight" IconColor="Color.Info" Color="Color.Info" Class="p-1" Style="text-transform:unset;"> Click to View </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                <MudItem xs="4">
                    <MudPaper Elevation="4">
                        <MudText Class="pb-7 pt-5" Align="Align.Center" Typo="Typo.h5">Prescriptions Prepared</MudText>
                        <MudText Class="pb-7 pt-5" Align="Align.Center" Typo="Typo.h2" Color="Color.Primary">@prescriptionsPrepared / @prescriptionsDue</MudText>
                        <MudGrid Justify="Justify.FlexEnd" Class="pr-1">
                            <MudItem>
                                <MudButton OnClick="@(() =>  NavigationManager.NavigateTo("/PrescriptionPreparation", true))" Variant="Variant.Text" EndIcon="@Icons.Material.Outlined.KeyboardArrowRight" IconColor="Color.Info" Color="Color.Info" Class="p-1" Style="text-transform:unset;"> Click to View </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                <MudItem xs="4">
                    <MudPaper Elevation="4">
                        <MudText Class="pb-7 pt-5" Align="Align.Center" Typo="Typo.h5">Prescriptions Collected</MudText>
                        <MudText Class="pb-7 pt-5" Align="Align.Center" Typo="Typo.h2" Color="Color.Primary">@prescriptionsCollected / @prescriptionsDue</MudText>
                        <MudGrid Justify="Justify.FlexEnd" Class="pr-1">
                            <MudItem>
                                <MudButton OnClick="@(() =>  NavigationManager.NavigateTo("/PrescriptionCollection", true))" Variant="Variant.Text" EndIcon="@Icons.Material.Outlined.KeyboardArrowRight" IconColor="Color.Info" Color="Color.Info" Class="p-1" Style="text-transform:unset;"> Click to View </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudGrid>
        <MudGrid Style="flex-direction:row">
            <MudItem xs="12" Class="mt-12">
                <SfSchedule Readonly="true" TValue="Pickup" Width="100%" Height="650px" @bind-SelectedDate="@currentDate">
                    <ScheduleEventSettings DataSource="@pickupDatasource"></ScheduleEventSettings>
                </SfSchedule>
            </MudItem>
        </MudGrid>
        <MudGrid Style="flex-direction:row">
            <MudItem xs="12" Class="mt-7">
                <MudPaper Elevation="5" Class="pt-2">
                    <MudText Class="pt-5" Typo="Typo.h5" Align="Align.Center">There are a total of @patientWithFlagged.Count users to be verified.</MudText>
                    <MudGrid Justify="Justify.FlexEnd" Class="pr-1">
                        <MudItem>
                            <MudButton OnClick="@(() =>  NavigationManager.NavigateTo("/UserVerification", true))" Variant="Variant.Text" EndIcon="@Icons.Material.Outlined.KeyboardArrowRight" IconColor="Color.Info" Color="Color.Info" Class="p-1" Style="text-transform:unset;"> Click to View </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>

    </MudContainer>
}


@code {
    List<Patient> patientWithPickups = new();
    List<Patient> patientWithFlagged = new();
    int prescriptionsDue, prescriptionsPrepared, prescriptionsCollected;
    private List<PickupSchedulerPayload> pickupDatasource = new();
    private DateTime currentDate = DateTime.Now;
    bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole(Role.Pharmacist.ToString()) || user.IsInRole(Role.Admin.ToString()))
        {
            patientWithPickups = await PatientService.FetchAllPatientsWithPickups();
            patientWithFlagged = await PatientService.FetchAllPatientsForVerification();
            (prescriptionsDue, prescriptionsPrepared, prescriptionsCollected) = PatientService.ReturnPrescriptionCounters(patientWithPickups);
            pickupDatasource = PatientService.ReturnPickupScheduler(patientWithPickups);
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }

        isLoading = false;
    }
}
