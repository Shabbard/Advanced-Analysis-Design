@page "/Register"
@layout EmptyLayout
@using AdvancedAnalysisDesign.Models
@using AdvancedAnalysisDesign.Enums
@using InputType = MudBlazor.InputType
@using AdvancedAnalysisDesign.Services

@inject UserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
        <MudGrid Justify="Justify.Center" Class="mt-16">
            <MudItem>
                <EditForm Model="@registrationPayload" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <MudCard Elevation="5" Class="RegistrationCard">
                         <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Align="Align.Center" Typo="Typo.h3">Registration</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid Justify="Justify.Center" Spacing="2">
                                <MudItem xs="6">
                                    <MudTextField Label="First name" @bind-Value="registrationPayload.FirstName" For="@(() => registrationPayload.FirstName)" Required="true"/>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Surname" @bind-Value="registrationPayload.LastName" For="@(() => registrationPayload.LastName)" Required="true"/>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Email" @bind-Value="registrationPayload.EmailAddress" For="@(() => registrationPayload.EmailAddress)" Required="true"/>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Phone Number" @bind-Value="registrationPayload.PhoneNumber" For="@(() => registrationPayload.PhoneNumber)" Required="true"/>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudDatePicker Label="Date of Birth" InputIcon="null" @bind-Date="@registrationPayload.DateOfBirth"/>
                                </MudItem>

                                <MudItem xs="12">
                                    <MudSelect Label="Gender" Dense="true" OffsetY="true" @bind-Value="registrationPayload.Gender" Placeholder="Select culture">
                                        <MudSelectItem T="Gender" Value="@(Gender.Male)">Male</MudSelectItem>
                                        <MudSelectItem T="Gender" Value="@(Gender.Female)">Female</MudSelectItem>
                                        <MudSelectItem T="Gender" Value="@(Gender.Other)">Other</MudSelectItem>
                                    </MudSelect>
                                </MudItem>

                                <MudItem xs="6">
                                    <MudTextField Label="Password" @bind-Value="registrationPayload.Password" For="@(() => registrationPayload.Password)" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility"/>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Password" HelperText="Repeat the password" @bind-Value="registrationPayload.PasswordComparison" For="@(() => registrationPayload.PasswordComparison)" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" Required="true"/>
                                </MudItem>
                            </MudGrid>

                            <MudForm>
                                <MudSelect Label="User Account Type" Dense="true" OffsetY="true" @bind-Value="registrationPayload.UserRole" Placeholder="Select culture">
                                    <MudSelectItem T="Role" Value="@(Role.Patient)">Patient</MudSelectItem>
                                    <MudSelectItem T="Role" Value="@(Role.GP)">Doctor</MudSelectItem>
                                    <MudSelectItem T="Role" Value="@(Role.Pharmacist)">Pharmacist</MudSelectItem>
                                </MudSelect>
                            </MudForm>

                            <MudHidden IsHidden="@(registrationPayload.UserRole != Role.Patient)">
                                <MudGrid Spacing="1">
                                    <MudItem xs="12">
                                        <MudTextField Label="NHS Number" @bind-Value="registrationPayload.NhsNumber" For="@(() => registrationPayload.NhsNumber)"/>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudText Style="margin-top: 1rem" Typo="Typo.body1">Upload Image Verification</MudText>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudIconButton Icon="@Icons.Material.AddAPhoto"></MudIconButton>
                                    </MudItem>
                                </MudGrid>
                            </MudHidden>

                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Style="min-width:100%">Register</MudButton>
                        </MudCardActions>
                        <MudGrid Justify="Justify.Center" Class="mt-1 pb-2">
                            <MudLink Href="/Login" Typo="Typo.body2">Back to Login</MudLink> @*Link to Login page*@
                        </MudGrid>

                    </MudCard>
                </EditForm>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudMainContent>

@code{
    RegistrationPayload registrationPayload = new RegistrationPayload();
    
    bool isPasswordVisible;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.VisibilityOff;
    
    void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
        PasswordInputIcon = PasswordInputIcon == Icons.Material.VisibilityOff ? Icons.Material.Visibility : Icons.Material.VisibilityOff;
        PasswordInput = PasswordInput == InputType.Password ? InputType.Text : InputType.Password;
    }
 
    private async void OnValidSubmit(EditContext context)
    {
        StateHasChanged();
        try
        {
            await UserService.RegisterPatient(registrationPayload);
            Snackbar.Add("Registration successful!", Severity.Success, config => { config.ShowCloseIcon = false; });
            NavManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }
}