@page "/PasswordReset/{UserId}/{Code}"
@using System.Text
@using Microsoft.AspNetCore.Identity
@using AdvancedAnalysisDesign.Models.Database
@using AdvancedAnalysisDesign.Models.Payloads
@using AdvancedAnalysisDesign.Services
@using Microsoft.AspNetCore.WebUtilities
@inject UserManager<User> UserManager
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudGrid Justify="Justify.Center">
            <MudItem>
                <MudCard>
                    <MudCardContent>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Align="Align.Center" Typo="Typo.h4">Reset Password</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Align="Align.Center">To reset your password please enter a new password below.</MudText>
                            </MudItem>
                            <MudItem xs="12">
                                <EditForm Model="@passwordResetModel" OnValidSubmit="ResetPassword">
                                    <DataAnnotationsValidator/>
                                    <MudGrid>
                                        <MudItem xs="12">
                                            <MudTextField Label="New password" HelperText="Password must have at least one uppercase letter, digit and alphanumeric character" Class="mt-3" @bind-Value="passwordResetModel.NewPassword" For="@(() => passwordResetModel.NewPassword)"/>
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudTextField Label="Confim new password" HelperText="Repeat the password" Class="mt-3" @bind-Value="passwordResetModel.ConfirmNewPassword" For="@(() => passwordResetModel.ConfirmNewPassword)"/>
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Reset Password</MudButton>
                                        </MudItem>
                                    </MudGrid>
                                </EditForm>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudMainContent>

@code {
    [Parameter]
    public string Code { get; set; }
    [Parameter]
    public string UserId { get; set; }
    
    UpdatePasswordPayload passwordResetModel = new() {CurrentPassword = "thisisntneeded"};
    
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Code) || string.IsNullOrEmpty(UserId))
        {
            NavManager.NavigateTo("/");
        }
    }
    
    private async Task ResetPassword()
    {
        try
        {
            var decodedUserId = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(UserId));
                
            var user = await UserManager.FindByIdAsync(decodedUserId);
            if (user == null)
            {
                Snackbar.Add($"Unable to load user with ID '{UserId}'.", Severity.Error);
            }
            
            var decodedCode = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));

            var result = await UserManager.ResetPasswordAsync(user, decodedCode, passwordResetModel.NewPassword);

            foreach (var error in result.Errors)
            {
                throw new Exception(error.Description);
            }
                
            Snackbar.Add("Password update successful!", Severity.Success, config => { config.ShowCloseIcon = false; });
            
            NavManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }
}