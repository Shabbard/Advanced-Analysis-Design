@page "/ConfirmEmailChange/{UserId}/{Email}/{Code}"
@using AdvancedAnalysisDesign.Models.Database
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using AdvancedAnalysisDesign.Services
@using Microsoft.AspNetCore.Identity
@inject ISnackbar Snackbar
@inject UserManager<User> UserManager
@inject NavigationManager NavManager
@inject SignInService SignInService

@code {
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public string Email { get; set; }
    [Parameter]
    public string Code { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var decodedUserId = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(UserId));
            
            var user = await UserManager.FindByIdAsync(decodedUserId);
            if (user == null)
            {
                Snackbar.Add($"Unable to load user with ID '{UserId}'.", Severity.Error);
            }

            var decodedCode = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var decodedEmailAddress = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Email));
            
            var result = await UserManager.ChangeEmailAsync(user, decodedEmailAddress, decodedCode);
            if (!result.Succeeded)
            {
                Snackbar.Add("Error changing email.", Severity.Error);
            }

            // In our UI email and user name are one and the same, so when we update the email
            // we need to update the user name.
            var setUserNameResult = await UserManager.SetUserNameAsync(user, Email);
            if (!setUserNameResult.Succeeded)
            {
                Snackbar.Add("Error changing user name.", Severity.Error);
            }
            else
            {
                Snackbar.Add("Email address successfully updated.", Severity.Success);
                await SignInService.ResetUserLoginAsync(user);
            }
            
            NavManager.NavigateTo("/");
        }
    }
}