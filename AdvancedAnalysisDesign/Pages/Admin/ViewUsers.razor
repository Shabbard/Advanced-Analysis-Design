@using AdvancedAnalysisDesign.Models.DataTransferObjects
@using AdvancedAnalysisDesign.Services
@using AdvancedAnalysisDesign.Enums
@using AdvancedAnalysisDesign.Models.Database
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserService UserService

<MudTable Elevation="0" Items="Users" Height="700px" FixedHeader="true" Hover="true" SortLabel="Sort By" Filter="new Func<UserWithRoleDto,bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="@userSearchTerm" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Email Address</MudTh>
        <MudTh>User Role</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="First Name">
            <MudHighlighter Text="@context.User.UserDetail.FirstName"/>
        </MudTd>
        <MudTd DataLabel="Last Name">
            <MudHighlighter Text="@context.User.UserDetail.LastName"/>
        </MudTd>
        <MudTd DataLabel="Email Address">
            <MudHighlighter Text="@context.User.Email"/>
        </MudTd>
        <MudTd DataLabel="User Role">
            <MudHighlighter Text="@context.Role.ToString()"/>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    List<UserWithRoleDto> Users = new();
    
    private User _value = new(); // used for getter in patientSelected
    private User userSelected { get { return _value; } set { _value = value; OnSelect(); } } // When a patient is selected setter runs OnSelect
    
    string userSearchTerm;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole(Role.GP.ToString()))
        {
    // Users = await UserService.FetchAllUsers();
        }
        else if (user.IsInRole(Role.Admin.ToString()))
        {
            Users = await UserService.FetchAllUsers();
        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }
    }
    
    private bool FilterFunc(UserWithRoleDto user)
    {
        if (string.IsNullOrWhiteSpace(userSearchTerm))
            return true;
        if (user.User.UserDetail.FirstName.Contains(userSearchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.User.UserDetail.LastName.Contains(userSearchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.User.Email.Contains(userSearchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    //TODO: Add GP Surgery search
    }
    
    private async Task OnSelect()
    {
    // var userID = patientSelected.User.Id;
    // NavigationManager.NavigateTo("/GpUploadInput/" + userID, true);
    }
}