@page "/Admin"
@using AdvancedAnalysisDesign.Enums
@using AdvancedAnalysisDesign.Pages.SystemPortal
@using AdvancedAnalysisDesign.Models.Database
@using AdvancedAnalysisDesign.Models.DataTransferObjects
@using AdvancedAnalysisDesign.Models.Payloads
@using AdvancedAnalysisDesign.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject ISnackbar Snackbar

<MudContainer >
    <MudCard>
        <MudCardContent>
            <MudTabs Color="@Color.Primary" Rounded="true" Centered="true">
                <MudTabPanel Text="Users">
                    <MudTable Elevation="0" Items="Users" Height="700px" FixedHeader="true" Hover="true" SortLabel="Sort By" Filter="new Func<UserWithRoleDto,bool>(FilterFunc)">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Users</MudText>
                            <MudToolBarSpacer />
                            <MudTextField @bind-Value="@userSearchTerm" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>First Name</MudTh>
                            <MudTh>Last Name</MudTh>
                            <MudTh>Email Address</MudTh>
                            <MudTh>User Role</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="First Name">
                                <MudHighlighter Text="@context.User.UserDetail.FirstName"/>
                            </MudTd>
                            <MudTd DataLabel="Last Name">
                                <MudHighlighter Text="@context.User.UserDetail.LastName"/>
                            </MudTd>
                            <MudTd DataLabel="Email Address">
                                <MudHighlighter Text="@context.User.Email"/>
                            </MudTd>
                            <MudTd DataLabel="User Role">
                                <MudHighlighter Text="@context.Role.ToString()"/>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
                <MudTabPanel Text="Register User">
                    <EditForm Model="@registrationPayload" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator/>
                        <RegisterForm RegistrationPayload="@registrationPayload"></RegisterForm>
                        <MudGrid Spacing="1">
                            <MudItem xs="12">
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect Label="User Role" OffsetY="true" @bind-Value="registrationPayload.UserRole" Placeholder="@(Role.GP)">
                                    <MudSelectItem T="Role" Value="@(Role.GP)">General Practitioner</MudSelectItem>
                                    <MudSelectItem T="Role" Value="@(Role.Pharmacist)">Pharmacist</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                @* <MudSelect Label="@(registrationPayload.UserRole == Role.Pharmacist ? "Pharmacy" : "Surgery")" OffsetY="true" @bind-Value="registrationPayload.MedicalInstitution" Placeholder="@(Role.GP)"> *@
                                @*    @foreach () *@
                                @*    { *@
                                @*     *@
                                @*    } *@
                                @* </MudSelect> *@
                            </MudItem>  
                            <MudItem xs="12">
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Style="min-width:100%">Register</MudButton>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </MudTabPanel>
                <MudTabPanel Text="Surgeries">
                    <MudText>Item Two</MudText>
                </MudTabPanel>
                <MudTabPanel Text="Pharmacies">
                    <MudText>Item Three</MudText>
                </MudTabPanel>
                <MudTabPanel Text="Item Four">
                    <MudText>Item Four</MudText>
                </MudTabPanel>
            </MudTabs>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {

    NonPatientRegistrationPayload registrationPayload = new();
    List<UserWithRoleDto> Users = new();
    
    private User _value = new(); // used for getter in patientSelected
    private User userSelected { get { return _value; } set { _value = value; OnSelect(); } } // When a patient is selected setter runs OnSelect
    
    string userSearchTerm;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole(Role.GP.ToString()))
        {
            // Users = await UserService.FetchAllUsers();
        }
        else if (user.IsInRole(Role.Admin.ToString()))
        {
            Users = await UserService.FetchAllUsers();
        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }
    }
    
    private async void OnValidSubmit(EditContext context)
    {
        StateHasChanged();
        try
        {
            // await UserService.RegisterPatient(registrationPayload);
            Snackbar.Add("Registration successful!", Severity.Success, config => { config.ShowCloseIcon = false; });
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }
    
    private async Task OnSelect()
    {
        // var userID = patientSelected.User.Id;
        // NavigationManager.NavigateTo("/GpUploadInput/" + userID, true);
    }
    
    private bool FilterFunc(UserWithRoleDto user)
    {
        if (string.IsNullOrWhiteSpace(userSearchTerm))
            return true;
        if (user.User.UserDetail.FirstName.Contains(userSearchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.User.UserDetail.LastName.Contains(userSearchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.User.Email.Contains(userSearchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    //TODO: Add GP Surgery search
    }
}