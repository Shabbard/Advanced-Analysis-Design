@page "/Admin"
@using AdvancedAnalysisDesign.Enums
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<MudContainer>
    <MudCard>
        <MudCardContent>
            <MudTabs Color="@Color.Primary" Rounded="true" Centered="true">
                <MudTabPanel Text="Item One">
                    <MudText>Item One</MudText>
                </MudTabPanel>
                <MudTabPanel Text="Item Two">
                    <MudText>Item Two</MudText>
                </MudTabPanel>
                <MudTabPanel Text="Item Three">
                    <MudText>Item Three</MudText>
                </MudTabPanel>
                <MudTabPanel Text="Fake Prescription">
                    <MudGrid Class="px-4">
                        <MudItem xs="12">
                            <MudPaper Class="pa-4">

                                <MudText>Input Patient Test Results</MudText>

                                <MudGrid Style="flex-direction: row; align-items:center" Justify="Justify.Center" Class="py-2">

                                    <MudItem xs="2">
                                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Send" IconColor="Color.Primary" Size="Size.Large" OnClick="@SystemPrescribe">Prescribe Medication to Everyone!!!</MudButton>
                                    </MudItem>

                                </MudGrid>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
                <MudTabPanel Text="Item Five">
                    <MudText>Item Five</MudText>
                </MudTabPanel>
                <MudTabPanel Text="Item Six">
                    <MudText>Item Six</MudText>
                </MudTabPanel>
            </MudTabs>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole(Role.GP.ToString()) || user.IsInRole(Role.Admin.ToString()))
        {
        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }
    }

    private async Task SystemPrescribe()
    {

    }

}