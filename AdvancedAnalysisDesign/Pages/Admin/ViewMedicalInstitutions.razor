@using AdvancedAnalysisDesign.Models.DataTransferObjects
@using AdvancedAnalysisDesign.Models.Database
@using AdvancedAnalysisDesign.Services
@inject NonPatientService NonPatientService

<MudTable Elevation="0" Items="medicalInstitutions" Height="700px" FixedHeader="true" Hover="true" SortLabel="Sort By" Filter="new Func<MedicalInstitution,bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Medical Institutions</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="@searchTerm" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>Contact Number</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            <MudHighlighter Text="@context.Name"/>
        </MudTd>
        <MudTd DataLabel="Address">
            <MudHighlighter Text="@context.Address"/>
        </MudTd>
        <MudTd DataLabel="Contact Number">
            <MudHighlighter Text="@context.ContactNumber"/>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    List<MedicalInstitution> medicalInstitutions = new();
    string searchTerm;
    
    protected override async Task OnInitializedAsync()
    {
        medicalInstitutions = await NonPatientService.GetMedicalInstitutions();
    }
    
    private bool FilterFunc(MedicalInstitution medicalInstitution)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return true;
        if (medicalInstitution.Address.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        if (medicalInstitution.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}